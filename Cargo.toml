[package]
name = "wasmer-workspace"
description = "Wasmer workspace"
publish = false
autoexamples = false
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[dependencies]
hc-wasmer = { version = "=4.3.6-hc.1", path = "lib/api", default-features = false }
hc-wasmer-compiler = { version = "=4.3.6-hc.1", path = "lib/compiler", features = [
    "compiler",

], optional = true }
hc-wasmer-compiler-cranelift = { version = "=4.3.6-hc.1", path = "lib/compiler-cranelift", optional = true }
hc-wasmer-compiler-singlepass = { version = "=4.3.6-hc.1", path = "lib/compiler-singlepass", optional = true }
hc-wasmer-compiler-llvm = { version = "=4.3.6-hc.1", path = "lib/compiler-llvm", optional = true }
#hc-wasmer-emscripten = { version = "=4.3.6", path = "lib/emscripten", optional = true }
#hc-wasmer-wasix = { path = "lib/wasix", optional = true }
#hc-wasmer-wast = { version = "=4.3.6", path = "tests/lib/wast", optional = true }
#hc-wasi-test-generator = { version = "=4.3.6", path = "tests/wasi-wast", optional = true }
hc-wasmer-cache = { version = "=4.3.6-hc.1", path = "lib/cache", optional = true }
hc-wasmer-types = { version = "=4.3.6-hc.1", path = "lib/types" }
hc-wasmer-middlewares = { version = "=4.3.6-hc.1", path = "lib/middlewares", optional = true }

# Third party dependencies
cfg-if = "1.0"
tokio = { version = "1", features = [
	"rt",
	"rt-multi-thread",
	"macros",
], optional = true }
crossbeam-queue = "0.3.8"

[workspace]
members = [
#	"fuzz",
	"lib/api",
#	"lib/api/macro-wasmer-universal-test",
#	"lib/backend-api",
#	"lib/c-api",
#	"lib/c-api/examples/wasmer-capi-examples-runner",
#	"lib/c-api/tests/wasmer-c-api-test-runner",
	"lib/cache",
#	"lib/cli-compiler",
#	"lib/cli",
	"lib/compiler-cranelift",
	"lib/compiler-llvm",
	"lib/compiler-singlepass",
	"lib/compiler",
#	"lib/config",
	"lib/derive",
#	"lib/emscripten",
	"lib/object",
#	"lib/registry",
#	"lib/sys-utils",
	"lib/types",
#	"lib/virtual-io",
#	"lib/virtual-fs",
#	"lib/virtual-net",
	"lib/vm",
#	"lib/wai-bindgen-wasmer",
#	"lib/wasi-types",
#	"lib/wasix",
#	"lib/wasm-interface",
#	"lib/journal",
#	"lib/swift",
#	"tests/integration/cli",
#	"tests/integration/ios",
#	"tests/lib/compiler-test-derive",
#	"tests/lib/wast",
#	"tests/wasi-wast",
#	"tests/wasmer-argus",
]
resolver = "2"

[workspace.package]
authors = ["Wasmer Engineering Team <engineering@wasmer.io>"]
edition = "2021"
homepage = "https://wasmer.io/"
license = "MIT"
repository = "https://github.com/wasmerio/wasmer"
rust-version = "1.74"
version = "4.3.6-hc.1"

[workspace.dependencies]
# Repo-local crates
wasmer-config = { path = "./lib/config" }
#wasmer-wasix = { path = "./lib/wasix" }

# Wasmer-owned crates
webc = { version = "6.0.0-rc1", default-features = false, features = ["package"] }
edge-schema = { version = "=0.1.0" }
shared-buffer = "0.1.4"

# Third-party crates
dashmap = "6.0.1"
http = "1.0.0"
hyper = "1"
reqwest = { version = "0.12.0", default-features = false }
enumset = "1.1.0"
memoffset = "0.9.0"
wasmparser = { version = "0.121.0", default-features = false }
rkyv = { version = "0.7.40", features = ["indexmap", "validation", "strict"] }
memmap2 = { version = "0.6.2" }
toml = { version = "0.5.9", features = ["preserve_order"] }
indexmap = "2"
serde_yaml = "0.9.34"
libc = { version = "^0.2", default-features = false }

[build-dependencies]
test-generator = { path = "tests/lib/test-generator" }
build-deps = "0.1.4"
anyhow = "1.0"
glob = "0.3"
rustc_version = "0.4"

[dev-dependencies]
hc-wasmer = { version = "=4.3.6-hc.1", path = "lib/api", features = [
    "compiler",
    "singlepass",
    "sys",
] }
anyhow = "1.0"
criterion = { version = "0.5", default-features = false }
clap = { version = "=4.4.11" }
clap_builder = { version = "=4.4.11" }
clap_derive = { version = "=4.4.7" }
clap_lex = { version = "=0.6.0" }
lazy_static = "1.4"
serial_test = { version = "2.0", default-features = false }
compiler-test-derive = { path = "tests/lib/compiler-test-derive" }
tempfile = "3.6.0"
ureq = "2.6"
# For logging tests using the `RUST_LOG=debug` when testing
test-log = { version = "0.2", default-features = false, features = ["trace"] }
tracing = { version = "0.1", default-features = false, features = ["log"] }
tracing-subscriber = { version = "0.3", default-features = false, features = [
	"env-filter",
	"fmt",
] }

[features]
# Don't add the compiler features in default, please add them on the Makefile
# since we might want to autoconfigure them depending on the availability on the host.
default = [
	"wat",
#	"wast",
	"cache",
#	"wasi",
#	"engine",
	"wamr",
#	"emscripten",
	"middlewares",
]
# backend means that the `wasmer` crate will be compiled with the `wasmer-compiler` or the `jsc`.
# That means: that is able to execute modules
backend = []
jsc = ["hc-wasmer/jsc", "backend", "wat", "hc-wasmer/std"]
wamr = ["hc-wasmer/wamr"]
engine = ["universal"]
universal = []
cache = ["hc-wasmer-cache"]
#wast = ["hc-wasmer-wast"]
#wasi = ["hc-wasmer-wasix"]
#emscripten = ["hc-wasmer-emscripten"]
wat = ["hc-wasmer/wat"]
compiler = ["hc-wasmer/compiler", "backend", "hc-wasmer-compiler/translator"]
singlepass = ["compiler", "hc-wasmer-compiler-singlepass", "hc-wasmer/singlepass"]
cranelift = ["compiler", "hc-wasmer-compiler-cranelift", "hc-wasmer/cranelift"]
llvm = ["compiler", "hc-wasmer-compiler-llvm", "hc-wasmer/llvm"]
middlewares = ["hc-wasmer-middlewares"]
hc-wasmer-artifact-load = ["hc-wasmer-compiler/wasmer-artifact-load"]
hc-wasmer-artifact-create = ["hc-wasmer-compiler/wasmer-artifact-create"]
static-artifact-load = ["hc-wasmer-compiler/static-artifact-load"]
static-artifact-create = ["hc-wasmer-compiler/static-artifact-create"]

# Testing features
test-singlepass = ["singlepass"]
test-cranelift = ["cranelift"]
test-llvm = ["llvm"]

test-universal = ["test-generator/test-universal"]

# Specifies that we're running in coverage testing mode. This disables tests
# that raise signals because that interferes with tarpaulin.
coverage = []

#[profile.release]
#debug = true

# Enable optimizations for a few crates, even for debug builds.
# This greatly speeds up using debug builds, because these crates are extremely
# slow without optimizations.
[profile.dev.package.cranelift-codegen]
opt-level = 3
[profile.dev.package.regalloc2]
opt-level = 3
[profile.dev.package.wasmparser]
opt-level = 3
[profile.dev.package.rkyv]
opt-level = 3
[profile.dev.package.hc-wasmer-types]
opt-level = 3
[profile.dev.package.weezl]
opt-level = 3
[profile.dev.package.sha2]
opt-level = 3
[profile.dev.package.xxhash-rust]
opt-level = 3
[profile.dev.package.digest]
opt-level = 3

[[bench]]
name = "static_and_dynamic_functions"
harness = false

[[bench]]
name = "import_functions"
harness = false

[[example]]
name = "early-exit"
path = "examples/early_exit.rs"
required-features = ["backend"]

[[example]]
name = "engine"
path = "examples/engine.rs"
required-features = ["cranelift"]

[[example]]
name = "engine-headless"
path = "examples/engine_headless.rs"
required-features = ["cranelift"]

[[example]]
name = "platform-headless-ios"
path = "examples/platform_ios_headless.rs"
required-features = ["cranelift"]

[[example]]
name = "cross-compilation"
path = "examples/engine_cross_compilation.rs"
required-features = ["cranelift"]

[[example]]
name = "compiler-singlepass"
path = "examples/compiler_singlepass.rs"
required-features = ["singlepass"]

[[example]]
name = "compiler-cranelift"
path = "examples/compiler_cranelift.rs"
required-features = ["cranelift"]

[[example]]
name = "compiler-llvm"
path = "examples/compiler_llvm.rs"
required-features = ["llvm"]

[[example]]
name = "exported-function"
path = "examples/exports_function.rs"
required-features = ["backend"]

[[example]]
name = "exported-global"
path = "examples/exports_global.rs"
required-features = ["backend"]

[[example]]
name = "exported-memory"
path = "examples/exports_memory.rs"
required-features = ["backend"]

[[example]]
name = "imported-function"
path = "examples/imports_function.rs"
required-features = ["backend"]

[[example]]
name = "imported-global"
path = "examples/imports_global.rs"
required-features = ["backend"]

[[example]]
name = "tunables-limit-memory"
path = "examples/tunables_limit_memory.rs"
required-features = ["cranelift"]

[[example]]
name = "wasi"
path = "examples/wasi.rs"
required-features = ["wasi"]

[[example]]
name = "wasi-manual-setup"
path = "examples/wasi_manual_setup.rs"
required-features = ["tokio", "backend", "wasi"]

[[example]]
name = "wasi-pipes"
path = "examples/wasi_pipes.rs"
required-features = ["tokio", "backend", "wasi"]

[[example]]
name = "table"
path = "examples/table.rs"
required-features = ["backend"]

[[example]]
name = "memory"
path = "examples/memory.rs"
required-features = ["backend"]

[[example]]
name = "instance"
path = "examples/instance.rs"
required-features = ["backend"]

[[example]]
name = "errors"
path = "examples/errors.rs"
required-features = ["backend"]

[[example]]
name = "imported-function-env"
path = "examples/imports_function_env.rs"
required-features = ["backend"]

[[example]]
name = "imported-function-env-global"
path = "examples/imports_function_env_global.rs"
required-features = ["backend"]

[[example]]
name = "hello-world"
path = "examples/hello_world.rs"
required-features = ["backend"]

[[example]]
name = "metering"
path = "examples/metering.rs"
required-features = ["cranelift"]

[[example]]
name = "imports-exports"
path = "examples/imports_exports.rs"
required-features = ["backend"]

[[example]]
name = "features"
path = "examples/features.rs"
required-features = ["cranelift"]

[[example]]
name = "http-dynamic-size"
path = "examples/http_dynamic_size.rs"
required-features = ["cranelift"]
